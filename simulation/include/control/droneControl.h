#ifndef DRONECONTROL_H
#define DRONECONTROL_H 
#include <iostream>
#include "../thirdparty/eigenWrapper.h"
#include <vector>
#include "../subsystems/propeller.h"

using namespace Eigen;
using namespace std;
namespace SimCore{



class controlAllocator {
private:
    vector<Vector3d> positions;   
    vector<Vector3d> thrustDirs;   
    VectorXd spinTorque;           
    MatrixXd B;         
    MatrixXd Bpinv;    

    void buildCASMatrix();
public:

    controlAllocator(const vector<std::array<float,3>>& motorPositions,const vector<std::array<float,3>>& thrustDirections,vector<float> spinTCoefficent);
    controlAllocator(const controlAllocator& other) = default;
    /**
     * @brief Solves for the rotor thrusts required to produce the given wrench (force and torque).
     * @param desiredwrench 6D vector: [Fx, Fy, Fz, Tx, Ty, Tz]
     * @return Vector of individual motor thrusts
     */
    inline VectorXd allocate(const VectorXd& desiredwrench) const {
        VectorXd thrusts = Bpinv * desiredwrench;
        return thrusts;
    }


    inline const MatrixXd& getCASMatrix() const {
        return B;
    }

    /**
     * @brief Computes the actual force/torque (wrench) generated by a given vector of thrusts
     * @param thrusts Vector of individual motor thrusts
     * @return 6D vector: [Fx, Fy, Fz, Tx, Ty, Tz]
     */
    inline VectorXd computeWrench(const VectorXd& thrusts) const {
        return B * thrusts;
    }

    VectorXd toVectorXd(std::initializer_list<float> list);

};


} //SimCore

#endif
